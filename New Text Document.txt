
css box-sizing
css box-sizing - პროპერტი გვაძლევს საშუალებას რომ ელემენტის პადინგს და ბორდერს
მოიცავდეს მთლიანი სიგრძე და სიგანე რასაც ჩვენ დავუსეტავთ.

ექშელ სიგანე/სიგრძე  დეფოლტად ანგარიშდება ასე:
ელემენტის ექშ სიგანე= სიგანე+პადინგ+ბორდერ
ელემენტის ექშ სიმაღლე= სიმაღლე+პადინგ+ბორდერ

ეს იმას ნიშნავს რომ როცა ჩვენ ვსეტავთ ელემენტზე სიგრძესა და სიმაღლეს ეს ელემენტი გამოისახება უფრო დიდად იმის მიუხედავად რომ 
ჩვენ მოთხოვნილი ზომები გადავეცით
ეს იმიტომ ხდება რომ ამ დასეტილ სიგრძეს და სიგანეს ასევე ემატება პადინგსა და ბორდერის ზომებიც და ელემენტი უფრო იზრდება.
  ამ პრობლემას გადაჭრის box-sizing პროპერტი.

box-sizing პროპერტი საშუალებას გვაძლევს რომ ჩვენს მიერ დასეტილი სიმაღლე და სიგანე მოიცავდეს პადინგსაც და ბორდერსაც.
ამისთვის ელემენტს უნდა დავუწეროთ: box-sizing: border-box;
box-sizing-თვის  შესაძლო ველიუები არის:
1. content-box - დასეტილი სიმაღლე და სიგანე მოიცავს მხოლოდ კონტენტს. ბორდერს და
პადინგს არ მოიცავს.
2. border-box - დასეტილი სიმაღლე და სიგანე მოიცავს კონტენტს პადინგს და ბორდერს
3. initial - დეფლტ ველიუს სეტავს
4. inherit - გადაეცემა ეს პროპერტი მშობელი ელემენტისგან
------------------------------------------------------------------------------------------

The CSS Box Model
The CSS Box Model არის ბოქსი , რომელიც ფუთავს ყველა html ელემენტს. ის შეიცავს კონტენტს, პადინგს, ბორდერს და მერჯინს.
Content - ბოქსის შიგთავსი, კონტენტი, სადაც ტექსტი და იმიჯი არის გამოსახული
Padding - ეს არის თავისუფალი სივრცე კონტენტის გარშემო და არის ტრანსარენტული
Border - გარშემო ეკვრის პადინგს და კონტენტს
Margin - ასუფთავებს და იკავებს ცარიელ ადგილს ბორდერის გარშემო. მერჯინიც ტრანსპარენტია


გვაქვს ორი კატეგორიის ბოქს მოდელი block და inline 
ბოქს საიზინგით ვაკონტროლებთ ბოქსის ზომებს, ხოლო მის ქცევას ვაკონტროლებთ დისფლეი პროპერტის მნიშვნელობებით:

როცა display : block - რომელ ხაზზეც არის იმ მთლიანი ზოლის ოკუპირებას ახდენს სიგანეში
და სხვა ელემენტს ჩამოაგდებს დაბლა. ზომების ცვლილებაზე ბოქსიც შესაბამისად იზრდება სიგრძე სიგანეში.


როცა display : inline - დაიკავებს თავისთვის საჭირო ადგილს და გვერდით ელემენტებს მოისვამს გვერდით.
არ მუშაობს სიგანისა და სიგრძის განსაზღვრა. რეკომენდაცია: არ უნდა განვსაზღვროთ ტოპ და ბოთომ მერჯინ/პადინგ. Padingi იმიტომ არა რომ თავად ბოქსი იზრდება და მერჯინი იმიტომ არა რომ არ მუშაობს.

როცა display : inline-block - გვაძლევს საშუალებას დავუსეტოთ ელემენტებს სიგანე და სიმაღლე. ასევე უმჯობესია ფედინგები და მერჯინები ოღონდ მხოლოდ ტოპ და ბოთომების განსაზღვრა. სივრცის ოკუპირებას არ ახდენს და შესაძლებელს ხდის სხვა ელემენტებიც იყოლიოს გვერდით. საიზებისა , მერჯინის და პადინგების გაზრდით არ გადაეფარება სხვა ელემენტებს
ინლაინისგან აღებული აქვს ქცევა რომ გვერდით მოისვას ელემენტი, ბლოკისგან აღებული აქვს ქცევა რომ ზომების ცვლილება შეგვეძლოს და არ გადაედოს სხვა ელემენტებს.



--------------------------------------------------------------------------------------------------
CSS Layout - Overflow

CSS Overflow პროპერტი აკონტროლებს იმას თუ რა ხდება როდესაც კონტენტი არის  ძალიან დიდი და ის მუშაობს მხოლოდ ბლოკ ელემენტებთან . უნდა ჰქონდეს განსაზღვრული სიმაღლე
რომ განთავსდეს  ჩვენთვის სასურველ არეში
overflow პროპერტის ველიუებია:
1. visible - ეს დეფოლტია და ნიშნავს რომ კონტენტი გაიწევა ელემენტ ბოქსის გარეთ
2. hidden - ბოქსის საიზს არ გაცდება, მაგრამ რაც ჩაეტევა განსაზღვრულ არეში ის ჩანს და რაც ვერ ჩაეტევა ის დაიმალება
3. scroll - ბოქსის საიზს არ გასცდება და გაუჩნდება სქროლი დანარჩენი შინარსის ამოკითხვა რომ შევძლოთ
4. auto - ეს იგივე სქროლია, მაგრამ მაშინ გაუჩნდება თუ საჭირო გახდება
------------------------------------------------------------------------------------------
Float

float პროპერტი განსაზღვრავს ელემენტმა მარჯვენა მხარე დაიჭირს თუ მარცხენა
მისი მნიშვნელობებია:
1. none - ეს დეფოლტია და ნიშნავს რომ ფლოატი განსაზღვრული არ არის. ელემენტი რომელზეც ეს არის განსაზღვრული გამოჩნდება ის სადაც არის (ანუ არ ცურავსო)
2. left - ელემენტი თავისი კონტეინერის მარცხნივ არის 
3. right - ელემენტი თავისიკონტეინერის მარჯვნივ არის 
4. initial - ეს ქივორდი css პროპერტის დასაყენებლად გამოიყენება. მაგალითად თუ დივშია როგორც რაღაც სათაური და ასევე ტექსტი და მთლიან ტექსტზე ვრცელდება რომ იყოს წითელი, მაგრამ გვინდა რომ სათაური იყოს დეფოლტი სთაილ ფაილში ამ სათაურზე ცალკე განვუსაზღვრავთ : h1 {
  color: initial;
}    და ფერი იქნება შავი
5. inherit - მშობლისგან გადმოეცემა ეს პროპერტი თავის მნიშვნელობით
------------------------------------------------------------------------------
CSS text-decoration 

CSS text-decoration Property  გამოიყენება ტექსტისთვის დეკორაციების მისანიჭებლად , შესაძლო მნიშვნეობები:
1. text-decoration: text-decoration-line   (ანდერლაიინი, ოვერლაინი...)
2. text-decoration: text-decoration-color (ტექსტის დეკორაციის ფერი, ანუ ვთქვათ წითელი ხაზი როცა გვინდა გაესვას) 
3. text-decoration: text-decoration-style (ტექსტზე განსაზღვრავს წერტილოვანი, თუ ტირეები თუ სოლიდი, კლაკნილი ...)
4. text-decoration: text-decoration-thickness (დეკორაციის სისქეს განსაზღვრავს)
5. text-decoration: initial (დეფოლტი)
6. text-decoration: inherit (მშობლისგან მიიღებს)
------------------------------------------------------------------------------------------
CSS Transitions

CSS Transitions - პროპერტი საშუალებას გვაძლევს რომ პროპერტის რაღაც განსაზღვრული ველიუ გრძელდებოდეს იმდენ ხანს რამდენსაც ჩვენ გადავცემთ , ჰოვერზე ფერის შეცვლა რამდენი ხნით მოხდეს. თუ დურეიშენს არ დავუწერთ ეს გარდამავალი ეფექტი არ დაედება
იმიტომ რომ დეფოლდატ 0-ია
როგორ გამოვიყენოთ: ვიყენებთ css პროპერტის რომელიც გვინდა რომ ეფექტად დაედოს და ვუთითებთ ხანგრძლივობას (რამდენ ხანს გაგრძელდეს)
ვთქვათ გვინდა რაღაც დივზე მაუსჰოვერით იზრდებოდეს სიგანეში ეს ელემენტი. სტილებში დაგვჭირდება რომ ამ დივზე განვსაზღვროთ დეფოლტ სიმაღლე და სიგანე, ვთქვათ ბექგრაუნდი და transition: width 2s; რაც ჰოვერზე უნდა მოხდეს ის ცალკე უნდა დავწეროთ css-ში
ასე:
div:hover {
  width: 300px;
}
ეს ნიშნავს რომ მაუსოვერზე გაიზარდოს სიგანეში და გახდეს 300px, მაგრამ რამდენ ხანში უნდა გააკეთოს ეს წერია იმ ზედა ცალკე დივში transition: width 2s;

div {
  width: 100px;
  height: 100px;
  background: red;
  transition: width 2s;
}

div:hover {
  width: 300px;
}

-----------------------------------------------------------------------------

Div

დივი თავის ბუნებით არის ბლოკ ლაინ ელემენტი, მაგრამ თუ გვინდა რომ მოისვას გვერდით ელემენტები არსებობს რამდენიმე ხერხი:
1.
ვთქვათ ერთ დივში დივ-დედა გვაქვს კიდევ 2 დივი დივ-1 და დივ-2
დედა დივს უნდა დავუწეროთ overflow:auto და შვილ ელემენტებზე უნდა გავავრცელოთ float:left 
ამ შემთხვევაში გვერდით მოსკუპდება ეს 2 დივი. დივ-1 და დივ-2
2.
ვთქვათ გვაქვს 3 დივი, თითოეულში არის ჰ1 და პ თეგები , ზოგადად დივ სელექთორს უნდა დავუწეროთ display:inline-block
3.
გვაქვს მე2 საკითხში რა მაგალითიც არის ისეთი მაგალითი, ვაკეთებთ დივის კონტეინერს რომლის შვილებიც იქნებიან ეს 3 დივი. და ამ კონტეინერს gგავუკეთოთ კლასი: mycontainer. სტილებში ვწერთ: .mycontainer{ display:flex;}   ხოლო ამ კონტეინერის შვილი დივებისთვის ვწერთ: 
.mycontainer > div {
  width:33%;
}
დისფლეი ფლექსი აუცილებელია რომ მშობელ კონტეინერში გვეწეროს სტილების მხარე.
4. 
Display: grid რომელიც ჯერ არ გვისწავლია.
